[TAIPY]

[JOB]
mode = "standalone"
max_nb_of_workers = "2:int"

[DATA_NODE.initial_dataset]
storage_type = "pickle"
path = "data/initial_dataset.p"
has_header = "True:bool"

[DATA_NODE.preprocessed_dataset]

[DATA_NODE.train_dataset]

[DATA_NODE.test_dataset]

[DATA_NODE.feature_selector_default]
storage_type = "json"

[DATA_NODE.feature_selector]
storage_type = "json"

[DATA_NODE.feature_selection_info]
storage_type = "json"

[DATA_NODE.split_parameter]
storage_type = "json"

[DATA_NODE.split_parameter_info]
storage_type = "json"

[DATA_NODE.train_parameters_list_default]
storage_type = "json"

[DATA_NODE.train_dataset_proba_baseline]

[DATA_NODE.train_dataset_metrics_baseline]

[DATA_NODE.train_parameters_baseline]
storage_type = "json"

[DATA_NODE.trained_model_baseline]

[DATA_NODE.train_parameters_info_baseline]
storage_type = "json"

[DATA_NODE.threshold_baseline]
storage_type = "json"

[DATA_NODE.forecast_dataset_baseline]

[DATA_NODE.shap_values_baseline]

[DATA_NODE.roc_data_baseline]

[DATA_NODE.auc_score_baseline]

[DATA_NODE.metrics_baseline]

[DATA_NODE.feature_importance_baseline]

[DATA_NODE.results_baseline]

[DATA_NODE.train_dataset_proba_logistic_regression]

[DATA_NODE.train_dataset_metrics_logistic_regression]

[DATA_NODE.train_parameters_logistic_regression]
storage_type = "json"

[DATA_NODE.trained_model_logistic_regression]

[DATA_NODE.train_parameters_info_logistic_regression]
storage_type = "json"

[DATA_NODE.threshold_logistic_regression]
storage_type = "json"

[DATA_NODE.forecast_dataset_logistic_regression]

[DATA_NODE.shap_values_logistic_regression]

[DATA_NODE.roc_data_logistic_regression]

[DATA_NODE.auc_score_logistic_regression]

[DATA_NODE.metrics_logistic_regression]

[DATA_NODE.feature_importance_logistic_regression]

[DATA_NODE.results_logistic_regression]

[DATA_NODE.train_dataset_proba_random_forest]

[DATA_NODE.train_dataset_metrics_random_forest]

[DATA_NODE.train_parameters_random_forest]
storage_type = "json"

[DATA_NODE.trained_model_random_forest]

[DATA_NODE.train_parameters_info_random_forest]
storage_type = "json"

[DATA_NODE.threshold_random_forest]
storage_type = "json"

[DATA_NODE.forecast_dataset_random_forest]

[DATA_NODE.shap_values_random_forest]

[DATA_NODE.roc_data_random_forest]

[DATA_NODE.auc_score_random_forest]

[DATA_NODE.metrics_random_forest]

[DATA_NODE.feature_importance_random_forest]

[DATA_NODE.results_random_forest]

[DATA_NODE.train_dataset_proba_xgboost]

[DATA_NODE.train_dataset_metrics_xgboost]

[DATA_NODE.train_parameters_xgboost]
storage_type = "json"

[DATA_NODE.trained_model_xgboost]

[DATA_NODE.train_parameters_info_xgboost]
storage_type = "json"

[DATA_NODE.threshold_xgboost]
storage_type = "json"

[DATA_NODE.forecast_dataset_xgboost]

[DATA_NODE.shap_values_xgboost]

[DATA_NODE.roc_data_xgboost]

[DATA_NODE.auc_score_xgboost]

[DATA_NODE.metrics_xgboost]

[DATA_NODE.feature_importance_xgboost]

[DATA_NODE.results_xgboost]

[TASK.preprocess_dataset]
function = "algos.algos.preprocess_dataset:function"
inputs = [ "initial_dataset:SECTION",]
outputs = [ "preprocessed_dataset:SECTION",]
skippable = "True:bool"

[TASK.create_train_and_test_data]
function = "algos.algos.create_train_test_data:function"
inputs = [ "preprocessed_dataset:SECTION", "split_parameter:SECTION",]
outputs = [ "train_dataset:SECTION", "test_dataset:SECTION", "split_parameter_info:SECTION",]
skippable = "True:bool"

[TASK.select_feature]
function = "algos.algos.select_feature:function"
inputs = [ "test_dataset:SECTION", "train_dataset:SECTION", "feature_selector:SECTION",]
outputs = [ "feature_selection_info:SECTION",]
skippable = "True:bool"

[TASK.train_model_baseline]
function = "algos.algos.train_model_baseline:function"
inputs = [ "train_dataset:SECTION", "feature_selection_info:SECTION", "train_parameters_baseline:SECTION",]
outputs = [ "trained_model_baseline:SECTION", "feature_importance_baseline:SECTION", "train_parameters_info_baseline:SECTION",]
skippable = "True:bool"

[TASK.find_best_threshold_baseline]
function = "algos.algos.find_best_threshold:function"
inputs = [ "trained_model_baseline:SECTION", "train_dataset:SECTION", "feature_selection_info:SECTION",]
outputs = [ "train_dataset_proba_baseline:SECTION", "threshold_baseline:SECTION",]
skippable = "True:bool"

[TASK.create_metrics_on_train_baseline]
function = "algos.algos.create_metrics_on_train:function"
inputs = [ "train_dataset_proba_baseline:SECTION", "threshold_baseline:SECTION",]
outputs = [ "train_dataset_metrics_baseline:SECTION",]
skippable = "True:bool"

[TASK.predict_the_test_data_baseline]
function = "algos.algos.forecast:function"
inputs = [ "test_dataset:SECTION", "trained_model_baseline:SECTION", "feature_selection_info:SECTION",]
outputs = [ "forecast_dataset_baseline:SECTION", "shap_values_baseline:SECTION",]
skippable = "True:bool"

[TASK.task_roc_baseline]
function = "algos.algos.roc_from_scratch:function"
inputs = [ "forecast_dataset_baseline:SECTION", "test_dataset:SECTION",]
outputs = [ "roc_data_baseline:SECTION", "auc_score_baseline:SECTION",]
skippable = "True:bool"

[TASK.task_create_metrics_baseline]
function = "algos.algos.create_metrics:function"
inputs = [ "forecast_dataset_baseline:SECTION", "test_dataset:SECTION", "auc_score_baseline:SECTION", "threshold_baseline:SECTION",]
outputs = [ "metrics_baseline:SECTION",]
skippable = "True:bool"

[TASK.task_create_results_baseline]
function = "algos.algos.create_results:function"
inputs = [ "forecast_dataset_baseline:SECTION", "test_dataset:SECTION", "threshold_baseline:SECTION",]
outputs = [ "results_baseline:SECTION",]
skippable = "True:bool"

[TASK.train_model_logistic_regression]
function = "algos.algos.train_model_logistic_regression_optuna:function"
inputs = [ "train_dataset:SECTION", "feature_selection_info:SECTION", "train_parameters_logistic_regression:SECTION",]
outputs = [ "trained_model_logistic_regression:SECTION", "feature_importance_logistic_regression:SECTION", "train_parameters_info_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.find_best_threshold_logistic_regression]
function = "algos.algos.find_best_threshold:function"
inputs = [ "trained_model_logistic_regression:SECTION", "train_dataset:SECTION", "feature_selection_info:SECTION",]
outputs = [ "train_dataset_proba_logistic_regression:SECTION", "threshold_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.create_metrics_on_train_logistic_regression]
function = "algos.algos.create_metrics_on_train:function"
inputs = [ "train_dataset_proba_logistic_regression:SECTION", "threshold_logistic_regression:SECTION",]
outputs = [ "train_dataset_metrics_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.predict_the_test_data_logistic_regression]
function = "algos.algos.forecast:function"
inputs = [ "test_dataset:SECTION", "trained_model_logistic_regression:SECTION", "feature_selection_info:SECTION",]
outputs = [ "forecast_dataset_logistic_regression:SECTION", "shap_values_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.task_roc_logistic_regression]
function = "algos.algos.roc_from_scratch:function"
inputs = [ "forecast_dataset_logistic_regression:SECTION", "test_dataset:SECTION",]
outputs = [ "roc_data_logistic_regression:SECTION", "auc_score_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.task_create_metrics_logistic_regression]
function = "algos.algos.create_metrics:function"
inputs = [ "forecast_dataset_logistic_regression:SECTION", "test_dataset:SECTION", "auc_score_logistic_regression:SECTION", "threshold_logistic_regression:SECTION",]
outputs = [ "metrics_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.task_create_results_logistic_regression]
function = "algos.algos.create_results:function"
inputs = [ "forecast_dataset_logistic_regression:SECTION", "test_dataset:SECTION", "threshold_logistic_regression:SECTION",]
outputs = [ "results_logistic_regression:SECTION",]
skippable = "True:bool"

[TASK.train_model_random_forest]
function = "algos.algos.train_model_rf_optuna:function"
inputs = [ "train_dataset:SECTION", "feature_selection_info:SECTION", "train_parameters_random_forest:SECTION",]
outputs = [ "trained_model_random_forest:SECTION", "feature_importance_random_forest:SECTION", "train_parameters_info_random_forest:SECTION",]
skippable = "True:bool"

[TASK.find_best_threshold_random_forest]
function = "algos.algos.find_best_threshold:function"
inputs = [ "trained_model_random_forest:SECTION", "train_dataset:SECTION", "feature_selection_info:SECTION",]
outputs = [ "train_dataset_proba_random_forest:SECTION", "threshold_random_forest:SECTION",]
skippable = "True:bool"

[TASK.create_metrics_on_train_random_forest]
function = "algos.algos.create_metrics_on_train:function"
inputs = [ "train_dataset_proba_random_forest:SECTION", "threshold_random_forest:SECTION",]
outputs = [ "train_dataset_metrics_random_forest:SECTION",]
skippable = "True:bool"

[TASK.predict_the_test_data_random_forest]
function = "algos.algos.forecast:function"
inputs = [ "test_dataset:SECTION", "trained_model_random_forest:SECTION", "feature_selection_info:SECTION",]
outputs = [ "forecast_dataset_random_forest:SECTION", "shap_values_random_forest:SECTION",]
skippable = "True:bool"

[TASK.task_roc_random_forest]
function = "algos.algos.roc_from_scratch:function"
inputs = [ "forecast_dataset_random_forest:SECTION", "test_dataset:SECTION",]
outputs = [ "roc_data_random_forest:SECTION", "auc_score_random_forest:SECTION",]
skippable = "True:bool"

[TASK.task_create_metrics_random_forest]
function = "algos.algos.create_metrics:function"
inputs = [ "forecast_dataset_random_forest:SECTION", "test_dataset:SECTION", "auc_score_random_forest:SECTION", "threshold_random_forest:SECTION",]
outputs = [ "metrics_random_forest:SECTION",]
skippable = "True:bool"

[TASK.task_create_results_random_forest]
function = "algos.algos.create_results:function"
inputs = [ "forecast_dataset_random_forest:SECTION", "test_dataset:SECTION", "threshold_random_forest:SECTION",]
outputs = [ "results_random_forest:SECTION",]
skippable = "True:bool"

[TASK.train_model_xgboost]
function = "algos.algos.train_model_xgboost_optuna:function"
inputs = [ "train_dataset:SECTION", "feature_selection_info:SECTION", "train_parameters_xgboost:SECTION",]
outputs = [ "trained_model_xgboost:SECTION", "feature_importance_xgboost:SECTION", "train_parameters_info_xgboost:SECTION",]
skippable = "True:bool"

[TASK.find_best_threshold_xgboost]
function = "algos.algos.find_best_threshold:function"
inputs = [ "trained_model_xgboost:SECTION", "train_dataset:SECTION", "feature_selection_info:SECTION",]
outputs = [ "train_dataset_proba_xgboost:SECTION", "threshold_xgboost:SECTION",]
skippable = "True:bool"

[TASK.create_metrics_on_train_xgboost]
function = "algos.algos.create_metrics_on_train:function"
inputs = [ "train_dataset_proba_xgboost:SECTION", "threshold_xgboost:SECTION",]
outputs = [ "train_dataset_metrics_xgboost:SECTION",]
skippable = "True:bool"

[TASK.predict_the_test_data_xgboost]
function = "algos.algos.forecast:function"
inputs = [ "test_dataset:SECTION", "trained_model_xgboost:SECTION", "feature_selection_info:SECTION",]
outputs = [ "forecast_dataset_xgboost:SECTION", "shap_values_xgboost:SECTION",]
skippable = "True:bool"

[TASK.task_roc_xgboost]
function = "algos.algos.roc_from_scratch:function"
inputs = [ "forecast_dataset_xgboost:SECTION", "test_dataset:SECTION",]
outputs = [ "roc_data_xgboost:SECTION", "auc_score_xgboost:SECTION",]
skippable = "True:bool"

[TASK.task_create_metrics_xgboost]
function = "algos.algos.create_metrics:function"
inputs = [ "forecast_dataset_xgboost:SECTION", "test_dataset:SECTION", "auc_score_xgboost:SECTION", "threshold_xgboost:SECTION",]
outputs = [ "metrics_xgboost:SECTION",]
skippable = "True:bool"

[TASK.task_create_results_xgboost]
function = "algos.algos.create_results:function"
inputs = [ "forecast_dataset_xgboost:SECTION", "test_dataset:SECTION", "threshold_xgboost:SECTION",]
outputs = [ "results_xgboost:SECTION",]
skippable = "True:bool"

[SCENARIO.churn_classification]
tasks = [ "preprocess_dataset:SECTION", "create_train_and_test_data:SECTION", "select_feature:SECTION", "train_model_baseline:SECTION", "find_best_threshold_baseline:SECTION", "create_metrics_on_train_baseline:SECTION", "predict_the_test_data_baseline:SECTION", "task_roc_baseline:SECTION", "task_create_metrics_baseline:SECTION", "task_create_results_baseline:SECTION", "train_model_logistic_regression:SECTION", "find_best_threshold_logistic_regression:SECTION", "create_metrics_on_train_logistic_regression:SECTION", "predict_the_test_data_logistic_regression:SECTION", "task_roc_logistic_regression:SECTION", "task_create_metrics_logistic_regression:SECTION", "task_create_results_logistic_regression:SECTION", "train_model_random_forest:SECTION", "find_best_threshold_random_forest:SECTION", "create_metrics_on_train_random_forest:SECTION", "predict_the_test_data_random_forest:SECTION", "task_roc_random_forest:SECTION", "task_create_metrics_random_forest:SECTION", "task_create_results_random_forest:SECTION", "train_model_xgboost:SECTION", "find_best_threshold_xgboost:SECTION", "create_metrics_on_train_xgboost:SECTION", "predict_the_test_data_xgboost:SECTION", "task_roc_xgboost:SECTION", "task_create_metrics_xgboost:SECTION", "task_create_results_xgboost:SECTION",]
additional_data_nodes = [ "train_parameters_list_default:SECTION", "feature_selector_default:SECTION",]

[DATA_NODE.feature_selector_default.default_data]
feature_selector_name = "CorrelationsClassifier"

[DATA_NODE.feature_selector.default_data]
feature_selector_name = "CorrelationsClassifier"

[DATA_NODE.split_parameter.default_data]
test_size = "0.2:float"
random_state = "42:int"
apply_filter_split = "True:bool"
var_threshold_split = "0.0:float"
corr_threshold_split = "0.98:float"
apply_feature_generation = "True:bool"
sum_features = "True:bool"
diff_features = "True:bool"
poly_features = "True:bool"
poly_degree = "2:int"
apply_filter_gen = "True:bool"
var_threshold_gen = "0.0:float"
corr_threshold_gen = "0.1:float"

[DATA_NODE.train_parameters_baseline.default_data]
function_name = "train_model_baseline"

[DATA_NODE.train_parameters_logistic_regression.default_data]

[DATA_NODE.train_parameters_random_forest.default_data]
cv = "5:int"
function_name = "train_model_rf_optuna"
n_trials = "50:int"

[DATA_NODE.train_parameters_xgboost.default_data]
cv = "5:int"
function_name = "train_model_xgboost_optuna"
n_trials = "50:int"

[SCENARIO.churn_classification.comparators]

[SCENARIO.churn_classification.sequences]
change_threshold_baseline = [ "task_create_results_baseline:SECTION", "task_create_metrics_baseline:SECTION", "create_metrics_on_train_baseline:SECTION",]
change_threshold_logistic_regression = [ "task_create_results_logistic_regression:SECTION", "task_create_metrics_logistic_regression:SECTION", "create_metrics_on_train_logistic_regression:SECTION",]
change_threshold_random_forest = [ "task_create_results_random_forest:SECTION", "task_create_metrics_random_forest:SECTION", "create_metrics_on_train_random_forest:SECTION",]
change_threshold_xgboost = [ "task_create_results_xgboost:SECTION", "task_create_metrics_xgboost:SECTION", "create_metrics_on_train_xgboost:SECTION",]

[DATA_NODE.feature_selector_default.default_data.f2_scorer]
name = "fbeta_score"
beta = "4:int"
pos_label = "1:int"

[DATA_NODE.feature_selector_default.default_data.variance_threshold_filter]
threshold = "0:int"

[DATA_NODE.feature_selector_default.default_data.correlation_filter]
threshold = "0.02:float"

[DATA_NODE.feature_selector.default_data.f2_scorer]
name = "fbeta_score"
beta = "4:int"
pos_label = "1:int"

[DATA_NODE.feature_selector.default_data.variance_threshold_filter]
threshold = "0:int"

[DATA_NODE.feature_selector.default_data.correlation_filter]
threshold = "0.02:float"

[DATA_NODE.train_parameters_baseline.default_data.importance_data]
Features = [ "SensorOffsetHot-Cold", "band gap dpat_ok for band gap", "Radius",]
Importance = [ "56.6:float", "4.65:float", "96.9:float",]

[DATA_NODE.train_parameters_xgboost.default_data.ratio_multiplier_range]
high = "1.2:float"
low = "0.8:float"

[DATA_NODE.train_parameters_list_default.default_data.baseline.train_model_baseline]
function_name = "train_model_baseline"

[DATA_NODE.train_parameters_list_default.default_data.logistic_regression.train_model_logistic_regression]
class_weight_multiplier = "len(y) - n_pos"
function_name = "train_model_logistic_regression"
max_iter = "10:int"
solver = "lbfgs"

[DATA_NODE.train_parameters_list_default.default_data.logistic_regression.train_parameters_optuna]
function_name = "train_model_logistic_regression_optuna"
n_trials = "50:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_cv]
class_weight_multiplier = "len(y) - sum(y)"
cv = "3:int"
function_name = "train_model_rf_cv"
verbose = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna]
cv = "5:int"
function_name = "train_model_rf_optuna"
n_trials = "50:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_cv]
cv = "3:int"
function_name = "train_model_xgboost_cv"
scale_pos_weight_multiplier = "2:int"
verbose = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna]
cv = "5:int"
function_name = "train_model_xgboost_optuna"
n_trials = "50:int"

[DATA_NODE.train_parameters_random_forest.default_data.param_ranges.max_depth]
high = "30:int"
low = "10:int"

[DATA_NODE.train_parameters_random_forest.default_data.param_ranges.max_features]
choices = [ "sqrt", "0.5:float", "0.8:float",]

[DATA_NODE.train_parameters_random_forest.default_data.param_ranges.min_samples_leaf]
high = "10:int"
low = "1:int"

[DATA_NODE.train_parameters_random_forest.default_data.param_ranges.min_samples_split]
high = "20:int"
low = "2:int"

[DATA_NODE.train_parameters_random_forest.default_data.param_ranges.n_estimators]
high = "300:int"
low = "100:int"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.colsample_bytree]
high = "1.0:float"
low = "0.7:float"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.gamma]
high = "0.5:float"
low = "0.1:float"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.learning_rate]
high = "0.2:float"
low = "0.01:float"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.max_depth]
high = "20:int"
low = "5:int"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.n_estimators]
high = "300:int"
low = "100:int"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.reg_alpha]
high = "0.1:float"
low = "1e-06:float"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.reg_lambda]
high = "0.1:float"
low = "1e-06:float"

[DATA_NODE.train_parameters_xgboost.default_data.param_ranges.subsample]
high = "1.0:float"
low = "0.7:float"

[DATA_NODE.train_parameters_list_default.default_data.baseline.train_model_baseline.importance_data]
Features = [ "SensorOffsetHot-Cold", "band gap dpat_ok for band gap", "Radius",]
Importance = [ "56.6:float", "4.65:float", "96.9:float",]

[DATA_NODE.train_parameters_list_default.default_data.logistic_regression.train_parameters_optuna.f2_rare_scorer]
beta = "2:int"
name = "fbeta_score"
pos_label = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.logistic_regression.train_parameters_optuna.param_ranges]
C = [ "0.0001:float", "20:int",]
class_weight_multiplier = [ "1:int", "20:int",]
max_iter = "10:int"
solver = [ "liblinear", "saga",]

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_cv.f2_rare_scorer]
beta = "2:int"
name = "fbeta_score"
pos_label = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_cv.param_grid]
max_depth = [ "2:int", "5:int", "None",]
min_samples_split = [ "2:int", "5:int",]
n_estimators = [ "20:int", "50:int", "100:int",]

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_cv.f2_rare_scorer]
beta = "2:int"
name = "fbeta_score"
pos_label = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_cv.param_grid]
learning_rate = [ "0.01:float", "0.1:float", "0.2:float",]
max_depth = [ "2:int", "5:int",]
n_estimators = [ "30:int", "50:int", "100:int",]

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.ratio_multiplier_range]
high = "1.2:float"
low = "0.8:float"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna.param_ranges.max_depth]
high = "30:int"
low = "10:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna.param_ranges.max_features]
choices = [ "sqrt", "0.5:float", "0.8:float",]

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna.param_ranges.min_samples_leaf]
high = "10:int"
low = "1:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna.param_ranges.min_samples_split]
high = "20:int"
low = "2:int"

[DATA_NODE.train_parameters_list_default.default_data.random_forest.train_model_rf_optuna.param_ranges.n_estimators]
high = "300:int"
low = "100:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.colsample_bytree]
high = "1.0:float"
low = "0.7:float"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.gamma]
high = "0.5:float"
low = "0.1:float"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.learning_rate]
high = "0.2:float"
low = "0.01:float"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.max_depth]
high = "20:int"
low = "5:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.n_estimators]
high = "300:int"
low = "100:int"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.reg_alpha]
high = "0.1:float"
low = "1e-06:float"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.reg_lambda]
high = "0.1:float"
low = "1e-06:float"

[DATA_NODE.train_parameters_list_default.default_data.xgboost.train_model_xgboost_optuna.param_ranges.subsample]
high = "1.0:float"
low = "0.7:float"
